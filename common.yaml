esphome:
  name: ${node_name}
  friendly_name: ${visible_name}

esp32:
  board: esp32vn-iot-uno
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption: 
    key: !secret encryption_key

ota:
  id: my_ota
  platform: esphome
  password: !secret ota_password

#ota:
#  platform: http_request

#update:
#  - platform: http_request
#    name: Firmware Update
#    source: https://filer.dh.home/esphome/update/${node_name}/manifest.json
  
  
http_request:
  useragent: esphome/device
  verify_ssl: false
  timeout: 10s
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password
  domain: ".iot"
  on_connect:
    - script.execute: main_script

number:
  - platform: template
    name: ${visible_name} Sleep Duration
    unit_of_measurement: s
    max_value: 86400
    min_value: 0
    step: 1
    optimistic: true
#    set_action: !lambda 'id(my_select).publish_state(x);'
    id: ${node_name}_sleep_sec
    restore_value: true

binary_sensor:
  - platform: homeassistant
    id: prevent_deep_sleep
    entity_id: input_boolean.waitforupdate

script:
  - id: controlled_sleep
    then:
      - wait_until:
          condition:
            api.connected
      - logger.log: 
          format: "WaitForUpdate is %s"
          args: [ 'id(prevent_deep_sleep).state']
      - if:
          condition:
            binary_sensor.is_on: prevent_deep_sleep
          then:
           - logger.log: 'Skipping sleep, per prevent_deep_sleep'
          else:
           - deep_sleep.enter: 
               id: deep_sleep_1
               sleep_duration: !lambda 'return id(${node_name}_sleep_sec).state * 1000;'
      
deep_sleep:
  id: deep_sleep_1
  sleep_duration: 10s
  
